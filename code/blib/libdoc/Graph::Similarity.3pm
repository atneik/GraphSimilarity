.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Similarity 3"
.TH Graph::Similarity 3 "2013-05-16" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::Similarity \- Calculate similarity of the vertices in graph(s)
.SH "VERSION"
.IX Header "VERSION"
This document describes Graph::Similarity version 0.0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Graph;
\&    use Graph::Similarity;
\&
\&    my $g = Graph\->new; # Use Graph module
\&    $g\->add_vertices("a","b","c","d","e");
\&    $g\->add_edges([\*(Aqa\*(Aq, \*(Aqb\*(Aq], [\*(Aqb\*(Aq, \*(Aqc\*(Aq], [\*(Aqa\*(Aq, \*(Aqd\*(Aq], [\*(Aqd\*(Aq, \*(Aqe\*(Aq]);
\&
\&    # Calculate by SimRank
\&    my $s = new Graph::Similarity(graph => [$g]);
\&    my $method = $s\->use(\*(AqSimRank\*(Aq);
\&    $method\->setConstnact(0.8);
\&    $method\->calculate();
\&    $method\->showAllSimilarities;
\&    $method\->getSimilarity("c","e"); 
\&
\&    #===============================================
\&    # Or by Coupled Node Edge Scoring
\&    my $g1 = Graph\->new;
\&    $g1\->add_vertices("A","B","C");
\&    $g1\->add_edges([\*(AqA\*(Aq, \*(AqB\*(Aq], [\*(AqB\*(Aq,\*(AqC\*(Aq]);
\&
\&    my $g2 = Graph\->new;
\&    $g2\->add_vertices("a","b","c","d","e");
\&    $g2\->add_edges([\*(Aqa\*(Aq, \*(Aqb\*(Aq], [\*(Aqb\*(Aq, \*(Aqc\*(Aq], [\*(Aqa\*(Aq, \*(Aqd\*(Aq], [\*(Aqd\*(Aq, \*(Aqe\*(Aq]);
\&    my $method = $s\->use(\*(AqCoupledNodeEdgeScoring\*(Aq);
\&    $method\->calculate();
\&    $method\->showAllSimilarities;
\&
\&    #===============================================
\&    # Or by Similarity Flooding 
\&    my $g1 = Graph\->new(multiedged => 1);
\&    $g1\->add_vertices("I","coffee","apple","swim");
\&    $g1\->add_edge_by_id("I", "coffee", "drink");
\&    $g1\->add_edge_by_id("I", "swim", "can\*(Aqt");
\&    $g1\->add_edge_by_id("I", "apple", "eat");
\&
\&    my $g2 = Graph\->new(multiedged => 1);
\&    $g2\->add_vertices("she","cake","apple juice","swim");
\&    $g2\->add_edge_by_id("she", "apple juice", "drink");
\&    $g2\->add_edge_by_id("she", "swim", "can");
\&    $g2\->add_edge_by_id("she", "cake", "eat");
\&    
\&    my $s = new Graph::Similarity(graph => [$g1,$g2]);
\&    my $method = $s\->use(\*(AqSimimilarityFlooding\*(Aq);
\&    $method\->calculate();
\&    $method\->showAllSimilarities;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Graph is composed of vertices and edges (This is often also referred as nodes/edge in network).
Graph::Similarity calculate the similarity of the vertices(nodes) by the following algorithms,
.PP
.Vb 3
\&    *) SimRank \- Jeh et al "SimRank: A Measure of Structural\-Context Similarity"
\&    *) Coupled Node Edge Socring  \- Laura Zager "Graph Similarity and Matching" 
\&    *) Similarity Flooding \- Melnik et al. "Similarity Flooding: A Versatile Graph Matching Algorithm and its Application to Schema Matching"
.Ve
.PP
The algorithm is implemented by referring to the above papers. Each module in implementation layer(Graph::Similarity::<algorithm>) explains briefly about the algorithm.
However, if you would like to know the details, please read the original papers.
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS "$s = new Graph::Similarity(graph => [$g1, $g2])"
.el .SS "\f(CW$s\fP = new Graph::Similarity(graph => [$g1, \f(CW$g2\fP])"
.IX Subsection "$s = new Graph::Similarity(graph => [$g1, $g2])"
Constructor. Create instance with Graph argument. SimRank is one Graph, the others need two Graphs for the algorithm.
.ie n .SS "$s\->use('algorithm')"
.el .SS "\f(CW$s\fP\->use('algorithm')"
.IX Subsection "$s->use('algorithm')"
You can choose one of the algorithm. This use method verifies Graph feature to see whether it fits to the requirement. 
If there is no required feature, it dies out.
For example, when you specify two Graph in SimRank, it dies because SimRank needs to be calculated from one graph.
.ie n .SS "$s\->\fIcalculate()\fP"
.el .SS "\f(CW$s\fP\->\fIcalculate()\fP"
.IX Subsection "$s->calculate()"
Using the method that is specified by \fIuse()\fR, calculate the similarity. This returns a hash reference which is the results of calculation.
.SS "setNumOfIteration($num)"
.IX Subsection "setNumOfIteration($num)"
Set the number of Iteration. The argument should be Integer.
.ie n .SS "$s\->\fIshowAllSimilarities()\fP"
.el .SS "\f(CW$s\fP\->\fIshowAllSimilarities()\fP"
.IX Subsection "$s->showAllSimilarities()"
The results to \s-1STDOUT\s0.
.ie n .SS "$s\->getSimilairity(""X"", ""Y"")"
.el .SS "\f(CW$s\fP\->getSimilairity(``X'', ``Y'')"
.IX Subsection "$s->getSimilairity(X, Y)"
The vertex(node) has the name when it's created by Graph Module. Say, if you want to know the similarity between vertex \*(L"X\*(R" and \*(L"Y\*(R", use this method.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
You may see the following error messages:
.ie n .IP """This algorithm can only apply to single graph""" 4
.el .IP "\f(CWThis algorithm can only apply to single graph\fR" 4
.IX Item "This algorithm can only apply to single graph"
The algorithm needs to have single graph as argument.
.ie n .IP """The graph needs to be directed graph""" 4
.el .IP "\f(CWThe graph needs to be directed graph\fR" 4
.IX Item "The graph needs to be directed graph"
Undirected graph can't be applied to this algorithm.
.ie n .IP """The graph needs to be multiedged""" 4
.el .IP "\f(CWThe graph needs to be multiedged\fR" 4
.IX Item "The graph needs to be multiedged"
The algorithm needs to has multiedged graph with Graph\->new(multiedged => 1)
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Graph::Similarity requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
None.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shohei Kameda  \f(CW\*(C`<shoheik@cpan.org>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2012, Shohei Kameda \f(CW\*(C`<shoheik@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
